{"version":3,"sources":["webpack:///./src/components/templates/PostTemplate.tsx","webpack:///./node_modules/@material-ui/core/esm/useMediaQuery/useMediaQuery.js"],"names":["PostTemplate","data","postNode","console","_slug","suggestions","post","theme","useTheme","isSP","useMediaQuery","ArticleComponent","rel","href","config","isPost","imgInfo","cover","date","updatedAt","createdAt","htmlAst","tags","style","flexDirection","key","edge","postInfo","AuthorCardContainer","styled","MarkdownContainer","DateContainer","Container","ItemContainer","HeaderImg","queryInput","options","arguments","length","undefined","props","name","query","replace","supportMatchMedia","window","matchMedia","_props$options","_props$options$defaul","defaultMatches","_props$options$matchM","_props$options$noSsr","noSsr","_props$options$ssrMat","ssrMatchMedia","_React$useState","matches","match","setMatch","active","queryList","updateMatch","addListener","removeListener"],"mappings":"2FAAA,kMAYaA,EAAe,SAAC,GAAa,IAAXC,EAAW,EAAXA,KACrBC,EAAWD,EAAjB,eACA,MAGI,OAFAE,cADW,wBAGJ,6BAAP,cAEJ,IAAMC,EAAQF,cAAd,KACMG,EAAcJ,oBAApB,MACMK,EAAOJ,EAAb,YACMK,EAAQC,cACRC,EAAOC,YAAcH,mBAA3B,OACMI,EAAmBF,EAAO,EAAH,EAA7B,IACA,OAAQ,2BACN,yBACE,2BACE,kCAAWH,EADb,OAEE,0BAAMM,IAAN,YAAsBC,KAAI,GAAKC,IAAL,QAAsBV,KAGlD,uBAASF,SAAT,EAA6Ba,QAAQ,IAErC,qBAAWC,QAASd,cAAqBe,QAEzC,yBACE,yBACE,uBAAWC,KAAMhB,cAAqBiB,YACtC,uBAAWD,KAAMhB,cAAqBkB,cAI1C,yBACE,yBACE,uBAAUC,QAASnB,EAASmB,YAIhC,yBACE,uBAASC,KAAMhB,EAAKgB,OACpB,uBAAapB,SAAUA,KAGzB,yBACE,yBACE,sBA9BN,QAkCE,uBAAwBqB,MAAO,CAAEC,cAAef,EAAO,SAAW,QAC/DJ,EAAA,KAAgB,mBAAW,qBAAkBoB,IAAKC,mBAAvB,MAAoDC,SAAUD,WAK9FE,EAAsBC,IAAH,4FAAGA,CAAH,CAAzB,6CAIMC,EAAoBD,IAAH,0FAAGA,CAAH,CAAvB,mBAGME,EAAgBF,IAAH,sFAAGA,CAAH,CAAnB,qCAIMG,EAAYH,IAAH,kFAAGA,CAAH,CAAf,2DAKMI,EAAgBJ,IAAH,sFAAGA,CAAH,CAAnB,0FAQMK,EAAYL,YAAH,mFAAGA,CAAH,CAAf,gIAmEA,a,kCC7JA,sFAGe,SAASnB,EAAcyB,GACpC,IAAIC,EAAUC,UAAUC,OAAS,QAAsBC,IAAjBF,UAAU,GAAmBA,UAAU,GAAK,GAC9E9B,EAAQ,cACRiC,EAAQ,YAAc,CACxBjC,MAAOA,EACPkC,KAAM,mBACND,MAAO,KAST,IAAIE,EAA8B,mBAAfP,EAA4BA,EAAW5B,GAAS4B,EACnEO,EAAQA,EAAMC,QAAQ,eAAgB,IAKtC,IAAIC,EAAsC,oBAAXC,aAAuD,IAAtBA,OAAOC,WAEnEC,EAAiB,YAAS,GAAIP,EAAOJ,GACrCY,EAAwBD,EAAeE,eACvCA,OAA2C,IAA1BD,GAA2CA,EAC5DE,EAAwBH,EAAeD,WACvCA,OAAuC,IAA1BI,EAAmCN,EAAoBC,OAAOC,WAAa,KAAOI,EAC/FC,EAAuBJ,EAAeK,MACtCA,OAAiC,IAAzBD,GAA0CA,EAClDE,EAAwBN,EAAeO,cACvCA,OAA0C,IAA1BD,EAAmC,KAAOA,EAE1DE,EAAkB,YAAe,WACnC,OAAIH,GAASR,EACJE,EAAWJ,GAAOc,QAGvBF,EACKA,EAAcZ,GAAOc,QAKvBP,KAELQ,EAAQF,EAAgB,GACxBG,EAAWH,EAAgB,GAoC/B,OAlCA,aAAgB,WACd,IAAII,GAAS,EAEb,GAAKf,EAAL,CAIA,IAAIgB,EAAYd,EAAWJ,GAEvBmB,EAAc,WAIZF,GACFD,EAASE,EAAUJ,UAMvB,OAFAK,IACAD,EAAUE,YAAYD,GACf,WACLF,GAAS,EACTC,EAAUG,eAAeF,OAE1B,CAACnB,EAAOI,EAAYF,IAUhBa","file":"component---src-components-templates-post-template-tsx-7ec0c924d75122847b22.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport { graphql } from 'gatsby';\nimport styled from 'styled-components';\nimport Layout from '../organisms/Layout';\nimport Image from '../atoms/Image';\nimport { UpdatedAt, CreatedAt, AuthorCard } from '../molecules';\nimport { TagList, SocialLinks, SEOMeta, Markdown, ArticlesPreviewWrapper, } from '../atoms';\nimport { ArticlePreviewCard, ArticlePreviewLine } from '../molecules';\nimport config from '../../../data/SiteConfig';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { useTheme } from '@material-ui/core/styles';\nexport const PostTemplate = ({ data }) => {\n    const postNode = data.markdownRemark;\n    if (!postNode) {\n        console.error('Cannot Find postNode');\n        // TODO: エラーページに差し替える\n        return <div>Error Page</div>;\n    }\n    const _slug = postNode.frontmatter.slug;\n    const suggestions = data.allMarkdownRemark.edges;\n    const post = postNode.frontmatter;\n    const theme = useTheme();\n    const isSP = useMediaQuery(theme.breakpoints.down('sm'));\n    const ArticleComponent = isSP ? ArticlePreviewLine : ArticlePreviewCard;\n    return (<Layout>\n      <Container>\n        <Helmet>\n          <title>{`${post.title}`}</title>\n          <link rel=\"canonical\" href={`${config.siteUrl}${_slug}`}/>\n        </Helmet>\n\n        <SEOMeta postNode={postNode} isPost={true}/>\n\n        <HeaderImg imgInfo={postNode.frontmatter.cover}/>\n\n        <ItemContainer>\n          <DateContainer>\n            <UpdatedAt date={postNode.frontmatter.updatedAt}/>\n            <CreatedAt date={postNode.frontmatter.createdAt}/>\n          </DateContainer>\n        </ItemContainer>\n\n        <ItemContainer>\n          <MarkdownContainer>\n            <Markdown htmlAst={postNode.htmlAst}/>\n          </MarkdownContainer>\n        </ItemContainer>\n\n        <ItemContainer>\n          <TagList tags={post.tags}/>\n          <SocialLinks postNode={postNode}/>\n        </ItemContainer>\n\n        <ItemContainer>\n          <AuthorCardContainer>\n            <AuthorCard />\n          </AuthorCardContainer>\n        </ItemContainer>\n\n        <ArticlesPreviewWrapper style={{ flexDirection: isSP ? 'column' : 'row' }}>\n          {suggestions.map((edge) => (<ArticleComponent key={edge.node.frontmatter.title} postInfo={edge}/>))}\n        </ArticlesPreviewWrapper>\n      </Container>\n    </Layout>);\n};\nconst AuthorCardContainer = styled.div `\n  padding: 50px;\n  border: 1px solid lightgray;\n`;\nconst MarkdownContainer = styled.div `\n  margin: 0 10px;\n`;\nconst DateContainer = styled.div `\n  margin: 10px;\n  align-self: flex-end;\n`;\nconst Container = styled.div `\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\nconst ItemContainer = styled.div `\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n\n  width: 100%;\n  max-width: 700px;\n`;\nconst HeaderImg = styled(Image) `\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: 50% 50%;\n  padding: 0 !important;\n  height: 162px;\n  width: 100%;\n`;\nexport const postPageQuery = graphql `\n  query PostPageQuery($slug: String!, $suggestionNodeIDs: [String]) {\n    allMarkdownRemark(filter: {id: {in: $suggestionNodeIDs}}) {\n      edges {\n        node {\n          fields {\n            _slug\n            _createdAt\n            _updatedAt\n          }\n          excerpt(truncate: true)\n          frontmatter {\n            title\n            tags\n            cover {\n              publicURL\n              childImageSharp {\n                fluid {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n              extension\n            }\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n    markdownRemark(fields: {_slug: {eq: $slug}}) {\n      html\n      htmlAst\n      timeToRead\n      excerpt(truncate: true)\n      frontmatter {\n        title\n        cover {\n          publicURL\n          childImageSharp {\n            fluid {\n              base64\n              aspectRatio\n              src\n              srcSet\n              sizes\n              originalImg\n            }\n          }\n          extension\n        }\n        createdAt\n        updatedAt\n        category\n        tags\n        slug\n      }\n    }\n  }\n`;\nexport default PostTemplate;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nexport default function useMediaQuery(queryInput) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme: theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _props$options = _extends({}, props, options),\n      _props$options$defaul = _props$options.defaultMatches,\n      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,\n      _props$options$matchM = _props$options.matchMedia,\n      matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM,\n      _props$options$noSsr = _props$options.noSsr,\n      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,\n      _props$options$ssrMat = _props$options.ssrMatchMedia,\n      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;\n\n  var _React$useState = React.useState(function () {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      match = _React$useState[0],\n      setMatch = _React$useState[1];\n\n  React.useEffect(function () {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = matchMedia(query);\n\n    var updateMatch = function updateMatch() {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return function () {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query: query,\n      match: match\n    });\n  }\n\n  return match;\n}"],"sourceRoot":""}